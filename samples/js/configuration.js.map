{"version":3,"sources":["configuration.ts"],"names":[],"mappings":"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","file":"configuration.js","sourcesContent":["/// <reference path=\"../../dist/automapper-classes.d.ts\" />\r\n/// <reference path=\"../../dist/automapper-interfaces.d.ts\" />\r\n/// <reference path=\"../../dist/automapper-declaration.d.ts\" />\r\n\r\nmodule AutoMapperJs.Samples {\r\n    'use strict';\r\n\r\n    export class Base {\r\n        public apiJsonResult: any;\r\n    }\r\n\r\n    export class Person extends Base {\r\n\r\n    }\r\n\r\n    class MappingProfile implements IProfile {\r\n        public sourceMemberNamingConvention = new PascalCaseNamingConvention();\r\n        public destinationMemberNamingConvention = new CamelCaseNamingConvention();\r\n\r\n        public profileName = 'PascalCaseToCamelCase';\r\n\r\n        public configure(): void {\r\n            this.sourceMemberNamingConvention = new PascalCaseNamingConvention();\r\n            this.destinationMemberNamingConvention = new CamelCaseNamingConvention();\r\n        }\r\n    }\r\n\r\n    export class InitializeSamples {\r\n        public static initialize(): any {\r\n            automapper.initialize((cfg: IConfiguration) => {\r\n                cfg.addProfile(new MappingProfile());\r\n            });\r\n\r\n            const sourceKey = 'initialize';\r\n            const destinationKey = '{}';\r\n\r\n            const sourceObject = { FullName: 'John Doe' };\r\n\r\n            automapper\r\n                .createMap(sourceKey, destinationKey)\r\n                .withProfile('PascalCaseToCamelCase');\r\n\r\n            var result = automapper.map(sourceKey, destinationKey, sourceObject);\r\n\r\n            return result;\r\n        }\r\n    }\r\n\r\n    export class ForMemberSamples {\r\n        public static simpleMapFrom(): any {\r\n            const sourceKey = 'simpleMapFrom';\r\n            const destinationKey = '{}';\r\n\r\n            const sourceObject = { fullName: 'John Doe' };\r\n\r\n            automapper\r\n                .createMap(sourceKey, destinationKey)\r\n                .forMember('name', (opts: AutoMapperJs.IMemberConfigurationOptions) => opts.mapFrom('fullName'));\r\n\r\n            var result = automapper.map(sourceKey, destinationKey, sourceObject);\r\n\r\n            return result;\r\n        }\r\n\r\n        public static stackedForMemberCalls(): any {\r\n            const sourceKey = 'stackedForMemberCalls';\r\n            const destinationKey = 'Person';\r\n\r\n            const sourceObject = { birthdayString: '2000-01-01T00:00:00.000Z' };\r\n\r\n            automapper\r\n                .createMap(sourceKey, destinationKey)\r\n                .forMember('birthday', (opts: IMemberConfigurationOptions) => opts.mapFrom('birthdayString'))\r\n                .forMember('birthday', (opts: IMemberConfigurationOptions) => new Date(opts.sourceObject[opts.sourcePropertyName]));\r\n\r\n            var result = automapper.map(sourceKey, destinationKey, sourceObject);\r\n\r\n            return result;\r\n        }\r\n    }\r\n}"]}